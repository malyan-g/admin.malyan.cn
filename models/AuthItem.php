<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%auth_item}}".
 *
 * @property string $name
 * @property integer $type
 * @property string $describe
 * @property integer $created_at
 *
 * @property AuthAssignment[] $authAssignments
 * @property AuthItemChild[] $authItemChildren
 * @property AuthItemChild[] $authItemChildren0
 * @property AuthItem[] $children
 * @property AuthItem[] $parents
 */
class AuthItem extends \yii\db\ActiveRecord
{
    const TYPE_ROLE = 1;
    const TYPE_PERMISSION = 2;

    public $levelOne = 0;
    public $levelTwo;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%auth_item}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'describe', 'type'], 'required'],
            [['levelOne', 'levelTwo'], 'required', 'when' => function(){
                return $this->type == self::TYPE_PERMISSION;
            }],
            [['type', 'created_at'], 'integer'],
            [['name', 'describe'], 'string', 'max' => 64],
            [['type'], 'in', 'range' => [self::TYPE_ROLE, self::TYPE_PERMISSION]],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'name' => $this->type == self::TYPE_ROLE ? '角色名称' : '规则',
            'type' => '类型',
            'describe' => $this->type == self::TYPE_ROLE ? '描述' : '权限名称',
            'created_at' => '创建时间',
            'levelOne' => '一级菜单',
            'levelTwo' => '二级菜单'
        ];
    }

    /**
     * @inheritdoc
     */
    public function beforeSave($insert)
    {
        if($this->isNewRecord){
            $this->created_at = time();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function getMenu()
    {
        return $this->hasOne(Menu::className(), ['route' => 'name']);
    }
    
    /**
     * 权限判断
     * @param null $route
     * @return bool
     */
    public static function can($route = null)
    {
        $role = Yii::$app->session->get('admin_role');
        if($role) {
            // 允许访问所有的权限
            $allowedRole = Yii::$app->params['allowedRole'];
            if (in_array($role, $allowedRole)) {
                return false;
            }
            // 路由
            $route = $route === null ?Yii::$app->controller->id . '/' . Yii::$app->controller->action->id : $route;
           
            $allowedRoute = AuthItemChild::allowedRoute($role);

            if (in_array($route, ArrayHelper::merge($allowedRoute, Yii::$app->params['allowedRole']))) {
                return false;
            }
        }
        return true;
    }

    /**
     * 获取角色
     * @return array
     */
    public static function roleArray()
    {
        return self::find()->select('name')->where(['type' => self::TYPE_ROLE])->indexBy('name')->column();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthAssignments()
    {
        return $this->hasMany(AuthAssignment::className(), ['item_name' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthItemChildren()
    {
        return $this->hasMany(AuthItemChild::className(), ['parent' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthItemChildren0()
    {
        return $this->hasMany(AuthItemChild::className(), ['child' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getChildren()
    {
        return $this->hasMany(AuthItem::className(), ['name' => 'child'])->viaTable('{{%auth_item_child}}', ['parent' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParents()
    {
        return $this->hasMany(AuthItem::className(), ['name' => 'parent'])->viaTable('{{%auth_item_child}}', ['child' => 'name']);
    }
}
